-- esp.lua
--// Variables
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera
local cache = {}

local bones = {
    {"Head", "UpperTorso"},
    {"UpperTorso", "RightUpperArm"},
    {"RightUpperArm", "RightLowerArm"},
    {"RightLowerArm", "RightHand"},
    {"UpperTorso", "LeftUpperArm"},
    {"LeftUpperArm", "LeftLowerArm"},
    {"LeftLowerArm", "LeftHand"},
    {"UpperTorso", "LowerTorso"},
    {"LowerTorso", "LeftUpperLeg"},
    {"LeftUpperLeg", "LeftLowerLeg"},
    {"LeftLowerLeg", "LeftFoot"},
    {"LowerTorso", "RightUpperLeg"},
    {"RightUpperLeg", "RightLowerLeg"},
    {"RightLowerLeg", "RightFoot"}
}

--// Settings
local ESP_SETTINGS = {
    BoxOutlineColor = Color3.new(0, 0, 0),
    BoxColor = Color3.new(1, 1, 1),
    NameColor = Color3.new(1, 1, 1),
    HealthOutlineColor = Color3.new(0, 0, 0),
    HealthHighColor = Color3.new(0, 1, 0),
    HealthLowColor = Color3.new(1, 0, 0),
    CharSize = Vector2.new(3, 5),
    Teamcheck = false,
    WallCheck = false,
    Enabled = false,
    ShowBox = false,
    BoxType = "2D",
    ShowName = false,
    ShowHealth = false,
    ShowDistance = false,
    ShowSkeletons = false,
    ShowTracer = false,
    TracerColor = Color3.new(1, 1, 1), 
    TracerThickness = 2,
    SkeletonsColor = Color3.new(1, 1, 1),
    TracerPosition = "Bottom",
}

local function create(class, properties)
    local drawing = Drawing.new(class)
    for property, value in pairs(properties) do
        drawing[property] = value
    end
    return drawing
end

local function createEsp(player)
    local esp = {
        tracer = create("Line", {
            Thickness = ESP_SETTINGS.TracerThickness,
            Color = ESP_SETTINGS.TracerColor,
            Transparency = 0.5
        }),
        boxOutline = create("Square", {
            Color = ESP_SETTINGS.BoxOutlineColor,
            Thickness = 3,
            Filled = false
        }),
        box = create("Square", {
            Color = ESP_SETTINGS.BoxColor,
            Thickness = 1,
            Filled = false
        }),
        name = create("Text", {
            Color = ESP_SETTINGS.NameColor,
            Outline = true,
            Center = true,
            Size = 13
        }),
        healthOutline = create("Line", {
            Thickness = 3,
            Color = ESP_SETTINGS.HealthOutlineColor
        }),
        health = create("Line", {
            Thickness = 1
        }),
        distance = create("Text", {
            Color = Color3.new(1, 1, 1),
            Size = 12,
            Outline = true,
            Center = true
        }),
        tracer = create("Line", {
            Thickness = ESP_SETTINGS.TracerThickness,
            Color = ESP_SETTINGS.TracerColor,
            Transparency = 1
        }),
        boxLines = {},
    }

    cache[player] = esp
    cache[player]["skeletonlines"] = {}
end

local Players = game:GetService("Players")
local workspace = game:GetService("Workspace")
local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera

-- Cached raycast parameters
local raycastParams = RaycastParams.new()
raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
raycastParams.IgnoreWater = true

-- Initial ignore list
local ignoreList = {localPlayer.Character}
local transparentParts = {}

-- Function to update the ignore list
local function updateIgnoreList()
    ignoreList = {localPlayer.Character}
    for _, part in ipairs(transparentParts) do
        table.insert(ignoreList, part)
    end
    raycastParams.FilterDescendantsInstances = ignoreList
end

-- Function to update transparent parts cache
local function cacheTransparentParts()
    transparentParts = {}
    for _, part in ipairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") and part.Transparency > 0 then
            table.insert(transparentParts, part)
        end
    end
    updateIgnoreList()
end

-- Update transparent parts cache initially
cacheTransparentParts()

-- Listen to descendants being added or removed to update the cache
workspace.DescendantAdded:Connect(function(descendant)
    if descendant:IsA("BasePart") and descendant.Transparency > 0 then
        table.insert(transparentParts, descendant)
        updateIgnoreList()
    end
end)

workspace.DescendantRemoving:Connect(function(descendant)
    if descendant:IsA("BasePart") and descendant.Transparency > 0 then
        for i, part in ipairs(transparentParts) do
            if part == descendant then
                table.remove(transparentParts, i)
                updateIgnoreList()
                break
            end
        end
    end
end)

local function isPlayerBehindWall(player)
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        return false
    end

    -- Skip dead characters
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid and humanoid.Health <= 0 then
        return false
    end

    local rootPart = character.HumanoidRootPart
    local rayOrigin = camera.CFrame.Position
    local rayDirection = (rootPart.Position - rayOrigin).Unit * (rootPart.Position - rayOrigin).Magnitude

    -- Update the ignore list with the current player's character
    ignoreList[2] = character
    raycastParams.FilterDescendantsInstances = ignoreList

    -- Perform the raycast
    local result = workspace:Raycast(rayOrigin, rayDirection, raycastParams)

    return result and result.Instance:IsA("BasePart")
end

local function removeEsp(player)
    local esp = cache[player]
    if not esp then return end

    for _, drawing in pairs(esp) do
        drawing:Remove()
    end

    cache[player] = nil
end

local function updateEsp()
    for player, esp in pairs(cache) do
        local character, team = player.Character, player.Team
        if character and (not ESP_SETTINGS.Teamcheck or (team and team ~= localPlayer.Team)) then
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            local head = character:FindFirstChild("Head")
            local humanoid = character:FindFirstChild("Humanoid")
            local isBehindWall = ESP_SETTINGS.WallCheck and isPlayerBehindWall(player)
            local shouldShow = not isBehindWall and ESP_SETTINGS.Enabled
            if rootPart and head and humanoid and shouldShow and humanoid.Health > 0 then
                local position, onScreen = camera:WorldToViewportPoint(rootPart.Position)
                if onScreen then
                    local hrp2D = camera:WorldToViewportPoint(rootPart.Position)
                    local charSize = (camera:WorldToViewportPoint(rootPart.Position - Vector3.new(0, 3, 0)).Y - camera:WorldToViewportPoint(rootPart.Position + Vector3.new(0, 2.6, 0)).Y) / 2
                    local boxSize = Vector2.new(math.floor(charSize * 1.3), math.floor(charSize * 1.9))
                    local boxPosition = Vector2.new(math.floor(hrp2D.X - charSize * 1.3 / 2), math.floor(hrp2D.Y - charSize * 1.9 / 2))

                    if ESP_SETTINGS.ShowName and ESP_SETTINGS.Enabled then
                        esp.name.Visible = true
                        esp.name.Text = string.lower(player.Name)
                        esp.name.Position = Vector2.new(boxSize.X / 2 + boxPosition.X, boxPosition.Y - 16)
                        esp.name.Color = ESP_SETTINGS.NameColor
                    else
                        esp.name.Visible = false
                    end

                    if ESP_SETTINGS.ShowBox and ESP_SETTINGS.Enabled then
                        if ESP_SETTINGS.BoxType == "2D" then
                            esp.boxOutline.Size = boxSize
                            esp.boxOutline.Position = boxPosition
                            esp.box.Size = boxSize
                            esp.box.Position = boxPosition
                            esp.box.Color = ESP_SETTINGS.BoxColor
                            esp.box.Visible = true
                            esp.boxOutline.Visible = true
                            for _, line in ipairs(esp.boxLines) do
                                line:Remove()
                            end
                        elseif ESP_SETTINGS.BoxType == "Corner Box Esp" then
                            local lineW = (boxSize.X / 5)
                            local lineH = (boxSize.Y / 6)
                            local lineT = 1
    
                            if #esp.boxLines == 0 then
                                for i = 1, 16 do
                                    local boxLine = create("Line", {
                                        Thickness = 1,
                                        Color = ESP_SETTINGS.BoxColor,
                                        Transparency = 1
                                    })
                                    esp.boxLines[#esp.boxLines + 1] = boxLine
                                end
                            end
    
                            local boxLines = esp.boxLines
    
                            -- top left
                            boxLines[1].From = Vector2.new(boxPosition.X, boxPosition.Y)
                            boxLines[1].To = Vector2.new(boxPosition.X + lineW, boxPosition.Y)
                            boxLines[2].From = Vector2.new(boxPosition.X, boxPosition.Y)
                            boxLines[2].To = Vector2.new(boxPosition.X, boxPosition.Y + lineH)
    
                            -- top right
                            boxLines[3].From = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y)
                            boxLines[3].To = Vector2.new(boxPosition.X + boxSize.X - lineW, boxPosition.Y)
                            boxLines[4].From = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y)
                            boxLines[4].To = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y + lineH)
    
                            -- bottom left
                            boxLines[5].From = Vector2.new(boxPosition.X, boxPosition.Y + boxSize.Y)
                            boxLines[5].To = Vector2.new(boxPosition.X, boxPosition.Y + boxSize.Y - lineH)
                            boxLines[6].From = Vector2.new(boxPosition.X, boxPosition.Y + boxSize.Y)
                            boxLines[6].To = Vector2.new(boxPosition.X + lineW, boxPosition.Y + boxSize.Y)
    
                            -- bottom right
                            boxLines[7].From = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y + boxSize.Y)
                            boxLines[7].To = Vector2.new(boxPosition.X + boxSize.X - lineW, boxPosition.Y + boxSize.Y)
                            boxLines[8].From = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y + boxSize.Y)
                            boxLines[8].To = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y + boxSize.Y - lineH)
    
                            -- middle left
                            boxLines[9].From = Vector2.new(boxPosition.X, boxPosition.Y + boxSize.Y / 2)
                            boxLines[9].To = Vector2.new(boxPosition.X + lineW, boxPosition.Y + boxSize.Y / 2)
    
                            -- middle right
                            boxLines[10].From = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y + boxSize.Y / 2)
                            boxLines[10].To = Vector2.new(boxPosition.X + boxSize.X - lineW, boxPosition.Y + boxSize.Y / 2)
    
                            -- middle top
                            boxLines[11].From = Vector2.new(boxPosition.X + boxSize.X / 2, boxPosition.Y)
                            boxLines[11].To = Vector2.new(boxPosition.X + boxSize.X / 2, boxPosition.Y + lineH)
    
                            -- middle bottom
                            boxLines[12].From = Vector2.new(boxPosition.X + boxSize.X / 2, boxPosition.Y + boxSize.Y)
                            boxLines[12].To = Vector2.new(boxPosition.X + boxSize.X / 2, boxPosition.Y + boxSize.Y - lineH)
    
                            -- Hide other lines
                            for i = 1, #boxLines do
                                if i > 12 then
                                    boxLines[i].Visible = false
                                else
                                    boxLines[i].Visible = true
                                end
                            end
                        elseif ESP_SETTINGS.BoxType == "3D" then
                            local function createBoxLine()
                                return create("Line", {
                                    Thickness = 1,
                                    Color = ESP_SETTINGS.BoxColor,
                                    Transparency = 1
                                })
                            end
    
                            if #esp.boxLines == 0 then
                                for i = 1, 12 do
                                    local boxLine = createBoxLine()
                                    esp.boxLines[#esp.boxLines + 1] = boxLine
                                end
                            end
    
                            local boxLines = esp.boxLines
    
                            local hrp3D = rootPart.CFrame
                            local size = Vector3.new(4, 6, 1)
                            local corners = {
                                hrp3D * CFrame.new(size.X / 2, size.Y / 2, size.Z / 2).Position,
                                hrp3D * CFrame.new(size.X / 2, -size.Y / 2, size.Z / 2).Position,
                                hrp3D * CFrame.new(size.X / 2, -size.Y / 2, -size.Z / 2).Position,
                                hrp3D * CFrame.new(size.X / 2, size.Y / 2, -size.Z / 2).Position,
                                hrp3D * CFrame.new(-size.X / 2, size.Y / 2, size.Z / 2).Position,
                                hrp3D * CFrame.new(-size.X / 2, -size.Y / 2, size.Z / 2).Position,
                                hrp3D * CFrame.new(-size.X / 2, -size.Y / 2, -size.Z / 2).Position,
                                hrp3D * CFrame.new(-size.X / 2, size.Y / 2, -size.Z / 2).Position,
                            }
    
                            local function to2D(vector)
                                local screenPos, onScreen = camera:WorldToViewportPoint(vector)
                                return Vector2.new(screenPos.X, screenPos.Y), onScreen
                            end
    
                            local cornerLines = {
                                {corners[1], corners[2]},
                                {corners[2], corners[3]},
                                {corners[3], corners[4]},
                                {corners[4], corners[1]},
                                {corners[5], corners[6]},
                                {corners[6], corners[7]},
                                {corners[7], corners[8]},
                                {corners[8], corners[5]},
                                {corners[1], corners[5]},
                                {corners[2], corners[6]},
                                {corners[3], corners[7]},
                                {corners[4], corners[8]},
                            }
    
                            for i, line in ipairs(cornerLines) do
                                local from, to = to2D(line[1]), to2D(line[2])
                                boxLines[i].From = from
                                boxLines[i].To = to
                                boxLines[i].Visible = from and to
                            end
                        end
                    else
                        esp.box.Visible = false
                        esp.boxOutline.Visible = false
                        for _, line in ipairs(esp.boxLines) do
                            line.Visible = false
                        end
                    end

                    if ESP_SETTINGS.ShowTracer and ESP_SETTINGS.Enabled then
                        esp.tracer.Visible = true
                        esp.tracer.Color = ESP_SETTINGS.TracerColor
                        esp.tracer.Thickness = ESP_SETTINGS.TracerThickness
                        esp.tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
                        esp.tracer.To = Vector2.new(hrp2D.X, hrp2D.Y)
                    else
                        esp.tracer.Visible = false
                    end

                    if ESP_SETTINGS.ShowHealth and ESP_SETTINGS.Enabled then
                        esp.healthOutline.Visible = true
                        esp.health.Visible = true
                        esp.healthOutline.From = Vector2.new((boxPosition.X - 5), boxPosition.Y + boxSize.Y)
                        esp.healthOutline.To = Vector2.new((boxPosition.X - 5), boxPosition.Y)
                        esp.health.From = Vector2.new((boxPosition.X - 5), boxPosition.Y + (boxSize.Y * (humanoid.MaxHealth - humanoid.Health) / humanoid.MaxHealth))
                        esp.health.To = Vector2.new((boxPosition.X - 5), boxPosition.Y + boxSize.Y)
                        esp.health.Color = ESP_SETTINGS.HealthLowColor:lerp(ESP_SETTINGS.HealthHighColor, humanoid.Health / humanoid.MaxHealth)
                    else
                        esp.healthOutline.Visible = false
                        esp.health.Visible = false
                    end

                    if ESP_SETTINGS.ShowDistance and ESP_SETTINGS.Enabled then
                        esp.distance.Visible = true
                        local magnitude = (localPlayer.Character.HumanoidRootPart.Position - character.HumanoidRootPart.Position).Magnitude
                        esp.distance.Text = string.format("[%d Studs]", magnitude)
                        esp.distance.Position = Vector2.new(boxSize.X / 2 + boxPosition.X, boxPosition.Y + boxSize.Y + 1)
                        esp.distance.Color = ESP_SETTINGS.NameColor
                    else
                        esp.distance.Visible = false
                    end

                    if ESP_SETTINGS.ShowSkeletons and ESP_SETTINGS.Enabled then
                        for i, v in pairs(bones) do
                            local bonePos1, onScreen1 = camera:WorldToViewportPoint(character[v[1]].Position)
                            local bonePos2, onScreen2 = camera:WorldToViewportPoint(character[v[2]].Position)
                            if esp.skeletonlines[i] == nil then
                                esp.skeletonlines[i] = create("Line", {
                                    Thickness = 1,
                                    Color = ESP_SETTINGS.SkeletonsColor,
                                    Transparency = 1
                                })
                            end
                            if onScreen1 and onScreen2 then
                                esp.skeletonlines[i].From = Vector2.new(bonePos1.X, bonePos1.Y)
                                esp.skeletonlines[i].To = Vector2.new(bonePos2.X, bonePos2.Y)
                                esp.skeletonlines[i].Visible = true
                            else
                                esp.skeletonlines[i].Visible = false
                            end
                        end
                    else
                        for i, v in pairs(bones) do
                            if esp.skeletonlines[i] ~= nil then
                                esp.skeletonlines[i].Visible = false
                            end
                        end
                    end
                else
                    esp.box.Visible = false
                    esp.boxOutline.Visible = false
                    esp.tracer.Visible = false
                    esp.healthOutline.Visible = false
                    esp.health.Visible = false
                    esp.distance.Visible = false
                    for _, line in ipairs(esp.boxLines) do
                        line.Visible = false
                    end
                    for _, line in ipairs(esp.skeletonlines) do
                        line.Visible = false
                    end
                end
            end
        end)

        -- Name
        table.insert(esptable, esp)
    end

    local function removed(character)
        for i, v in pairs(esptable) do
            if v.char == character then
                for i, e in pairs(v.skeletonlines) do
                    e:Remove()
                end
                for i, e in pairs(v.boxLines) do
                    e:Remove()
                end
                v.box:Remove()
                v.boxOutline:Remove()
                v.tracer:Remove()
                v.healthOutline:Remove()
                v.health:Remove()
                v.distance:Remove()
                table.remove(esptable, i)
            end
        end
    end

    for i, v in pairs(players:GetPlayers()) do
        if v ~= localPlayer then
            added(v)
        end
    end

    players.PlayerAdded:Connect(added)
    players.PlayerRemoving:Connect(function(player)
        if player.Character then
            removed(player.Character)
        end
    end)

    localPlayer.CharacterAdded:Connect(function(character)
        delay(0.5, function()
            for i, v in pairs(players:GetPlayers()) do
                if v ~= localPlayer then
                    if v.Character then
                        removed(v.Character)
                        added(v)
                    end
                end
            end
        end)
    end)
end


return ESP
