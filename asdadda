-- esp.lua
--// Variables
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera
local cache = {}

local bones = {
    {"Head", "UpperTorso"},
    {"UpperTorso", "RightUpperArm"},
    {"RightUpperArm", "RightLowerArm"},
    {"RightLowerArm", "RightHand"},
    {"UpperTorso", "LeftUpperArm"},
    {"LeftUpperArm", "LeftLowerArm"},
    {"LeftLowerArm", "LeftHand"},
    {"UpperTorso", "LowerTorso"},
    {"LowerTorso", "LeftUpperLeg"},
    {"LeftUpperLeg", "LeftLowerLeg"},
    {"LeftLowerLeg", "LeftFoot"},
    {"LowerTorso", "RightUpperLeg"},
    {"RightUpperLeg", "RightLowerLeg"},
    {"RightLowerLeg", "RightFoot"}
}

--// Settings
local ESP_SETTINGS = {
    BoxOutlineColor = Color3.new(0, 0, 0),
    BoxColor = Color3.new(1, 1, 1),
    NameColor = Color3.new(1, 1, 1),
    HealthOutlineColor = Color3.new(0, 0, 0),
    HealthHighColor = Color3.new(0, 1, 0),
    HealthLowColor = Color3.new(1, 0, 0),
    CharSize = Vector2.new(4, 6),
    Teamcheck = false,
    WallCheck = false,
    Enabled = true,
    ShowBox = true,
    BoxType = "2D",
    ShowName = true,
    ShowHealth = true,
    ShowDistance = true,
    ShowSkeletons = true,
    ShowTracer = true,
    TracerColor = Color3.new(1, 1, 1), 
    TracerThickness = 2,
    SkeletonsColor = Color3.new(1, 1, 1),
    TracerPosition = "Bottom",
    ESP_InvisibleCheck = true -- Added invisibility check
}

local function create(class, properties)
    local drawing = Drawing.new(class)
    for property, value in pairs(properties) do
        drawing[property] = value
    end
    return drawing
end

local function createEsp(player)
    local esp = {
        tracer = create("Line", {
            Thickness = ESP_SETTINGS.TracerThickness,
            Color = ESP_SETTINGS.TracerColor,
            Transparency = 0.5
        }),
        boxOutline = create("Square", {
            Color = ESP_SETTINGS.BoxOutlineColor,
            Thickness = 3,
            Filled = false
        }),
        box = create("Square", {
            Color = ESP_SETTINGS.BoxColor,
            Thickness = 1,
            Filled = false
        }),
        name = create("Text", {
            Color = ESP_SETTINGS.NameColor,
            Outline = true,
            Center = true,
            Size = 13
        }),
        healthOutline = create("Line", {
            Thickness = 3,
            Color = ESP_SETTINGS.HealthOutlineColor
        }),
        health = create("Line", {
            Thickness = 1
        }),
        distance = create("Text", {
            Color = Color3.new(1, 1, 1),
            Size = 12,
            Outline = true,
            Center = true
        }),
        skeletonlines = {}
    }

    cache[player] = esp
end

local function removeEsp(player)
    local esp = cache[player]
    if not esp then return end

    for _, drawing in pairs(esp) do
        if typeof(drawing) == "table" then
            for _, line in pairs(drawing) do
                line:Remove()
            end
        else
            drawing:Remove()
        end
    end

    cache[player] = nil
end

local function isPlayerBehindWall(player)
    local character = player.Character
    if not character then
        return false
    end

    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then
        return false
    end

    local ray = Ray.new(camera.CFrame.Position, (rootPart.Position - camera.CFrame.Position).Unit * (rootPart.Position - camera.CFrame.Position).Magnitude)
    local hit, position = workspace:FindPartOnRayWithIgnoreList(ray, {localPlayer.Character, character})
    
    return hit and hit:IsA("Part")
end

local function updateEsp()
    if not ESP_SETTINGS.Enabled then return end

    for _, player in ipairs(Players:GetPlayers()) do
        if player == localPlayer then continue end

        local esp = cache[player]
        if not esp then continue end

        local character = player.Character
        if not character then
            esp.tracer.Visible = false
            esp.box.Visible = false
            esp.boxOutline.Visible = false
            esp.name.Visible = false
            esp.healthOutline.Visible = false
            esp.health.Visible = false
            esp.distance.Visible = false
            for _, lineData in ipairs(esp.skeletonlines) do
                lineData[1].Visible = false
            end
            continue
        end

        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if not rootPart then
            esp.tracer.Visible = false
            esp.box.Visible = false
            esp.boxOutline.Visible = false
            esp.name.Visible = false
            esp.healthOutline.Visible = false
            esp.health.Visible = false
            esp.distance.Visible = false
            for _, lineData in ipairs(esp.skeletonlines) do
                lineData[1].Visible = false
            end
            continue
        end

        local isBehindWall = ESP_SETTINGS.WallCheck and isPlayerBehindWall(player)
        local isInvisible = ESP_SETTINGS.ESP_InvisibleCheck and not character:IsVisible()

        if character and rootPart and not isBehindWall and not isInvisible then
            -- Update ESP visuals here
            local rootPos, onScreen = camera:WorldToViewportPoint(rootPart.Position)
            if onScreen then
                -- Update tracer
                esp.tracer.Visible = ESP_SETTINGS.ShowTracer
                if ESP_SETTINGS.TracerPosition == "Bottom" then
                    esp.tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
                elseif ESP_SETTINGS.TracerPosition == "Center" then
                    esp.tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
                end
                esp.tracer.To = Vector2.new(rootPos.X, rootPos.Y)

                -- Update box
                if ESP_SETTINGS.BoxType == "2D" then
                    local head = character:FindFirstChild("Head")
                    if head then
                        local headPos = camera:WorldToViewportPoint(head.Position)
                        esp.boxOutline.Size = ESP_SETTINGS.CharSize
                        esp.boxOutline.Position = Vector2.new(rootPos.X - ESP_SETTINGS.CharSize.X / 2, rootPos.Y - (headPos.Y - rootPos.Y))
                        esp.boxOutline.Visible = ESP_SETTINGS.ShowBox
                    end
                end

                -- Update name
                esp.name.Text = player.Name
                esp.name.Position = Vector2.new(rootPos.X, rootPos.Y - 30)
                esp.name.Visible = ESP_SETTINGS.ShowName

                -- Update health
                local humanoid = character:FindFirstChild("Humanoid")
                if humanoid then
                    local healthPercent = humanoid.Health / humanoid.MaxHealth
                    esp.health.From = Vector2.new(rootPos.X - 20, rootPos.Y)
                    esp.health.To = Vector2.new(rootPos.X - 20, rootPos.Y - 100 * healthPercent)
                    esp.health.Color = Color3.new(1 - healthPercent, healthPercent, 0)
                    esp.health.Visible = ESP_SETTINGS.ShowHealth
                    esp.healthOutline.From = Vector2.new(rootPos.X - 20, rootPos.Y)
                    esp.healthOutline.To = Vector2.new(rootPos.X - 20, rootPos.Y - 100)
                    esp.healthOutline.Visible = ESP_SETTINGS.ShowHealth
                end

                -- Update distance
                local distance = (localPlayer.Character.HumanoidRootPart.Position - rootPart.Position).Magnitude
                esp.distance.Text = string.format("%d", distance)
                esp.distance.Position = Vector2.new(rootPos.X, rootPos.Y + 30)
                esp.distance.Visible = ESP_SETTINGS.ShowDistance

                -- Update skeletons
                if ESP_SETTINGS.ShowSkeletons then
                    for _, bone in ipairs(bones) do
                        local part1 = character:FindFirstChild(bone[1])
                        local part2 = character:FindFirstChild(bone[2])
                        if part1 and part2 then
                            local pos1 = camera:WorldToViewportPoint(part1.Position)
                            local pos2 = camera:WorldToViewportPoint(part2.Position)
                            local line = esp.skeletonlines[bone]
                            if not line then
                                line = create("Line", {Color = ESP_SETTINGS.SkeletonsColor, Thickness = 2})
                                esp.skeletonlines[bone] = line
                            end
                            line.From = Vector2.new(pos1.X, pos1.Y)
                            line.To = Vector2.new(pos2.X, pos2.Y)
                            line.Visible = true
                        end
                    end
                end
            else
                esp.tracer.Visible = false
                esp.box.Visible = false
                esp.boxOutline.Visible = false
                esp.name.Visible = false
                esp.healthOutline.Visible = false
                esp.health.Visible = false
                esp.distance.Visible = false
                for _, lineData in ipairs(esp.skeletonlines) do
                    lineData[1].Visible = false
                end
            end
        else
            esp.tracer.Visible = false
            esp.box.Visible = false
            esp.boxOutline.Visible = false
            esp.name.Visible = false
            esp.healthOutline.Visible = false
            esp.health.Visible = false
            esp.distance.Visible = false
            for _, lineData in ipairs(esp.skeletonlines) do
                lineData[1].Visible = false
            end
        end
    end
end

-- Event Handlers
Players.PlayerAdded:Connect(function(player)
    createEsp(player)
end)

Players.PlayerRemoving:Connect(function(player)
    removeEsp(player)
end)

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= localPlayer then
        createEsp(player)
    end
end

RunService.RenderStepped:Connect(updateEsp)

